using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using MyCookBookApp.Models;
using MyCookBookApp.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MyCookBookApp.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IRecipeService _recipeService;

        public HomeController(ILogger<HomeController> logger, IRecipeService recipeService)
        {
            _logger = logger;
            _recipeService = recipeService;
        }

        public IActionResult Index()
        {
            ViewData["Title"] = "Home";
            return View();
        }

        public IActionResult About()
        {
            return View();
        }

        public IActionResult Recipes()
        {
            return View();
        }

        public IActionResult addRecipe()
        {
            return View();
        }

        // action method to handle dynamic recipe IDs
        [Route("recipes/{id}")]
        public async Task<IActionResult> RecipeDetail(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                return BadRequest("Recipe ID is required.");
            }

            var recipe = await _recipeService.GetRecipeByIdAsync(id);
            if (recipe == null)
            {
                return NotFound();
            }
            ViewData["Recipe"] = recipe;
            return View("RecipeDetails", recipe);
        }

        [HttpGet]
        [Route("Home/GetRecipeDetails/{id}")]
        public async Task<IActionResult> GetRecipeDetails(string id)
        {
            var recipe = await _recipeService.GetRecipeByIdAsync(id);
            if (recipe == null)
            {
                return NotFound();
            }
            return Json(recipe);
        }

        [HttpPost]
        public async Task<IActionResult> SaveRecipeChanges(string Id, string Name, string Category, string Instructions, string Thumbnail, List<string> IngredientNames, List<string> IngredientQuantities)
        {
            if (ModelState.IsValid)
            {
                var ingredients = new Dictionary<string, string>();
                for (int i = 0; i < IngredientNames.Count; i++)
                {
                    ingredients[IngredientNames[i]] = IngredientQuantities[i];
                }

                var recipe = new Recipe
                {
                    Id = Id,
                    Name = Name,
                    Category = Category,
                    Instructions = Instructions,
                    Thumbnail = Thumbnail,
                    Ingredients = ingredients
                };

                var updatedRecipe = await _recipeService.UpdateRecipeAsync(recipe);
                if (updatedRecipe != null)
                {
                    return RedirectToAction("RecipeDetail", new { id = recipe.Id });
                }
                return StatusCode(500, "Internal server error");
            }
            return BadRequest(ModelState);
        }

        [HttpPost]
        public async Task<IActionResult> AddRecipe(string Name, string Category, string Instructions, string Thumbnail, List<string> IngredientNames, List<string> IngredientQuantities)
        {
            var ingredients = new Dictionary<string, string>();
            for (int i = 0; i < IngredientNames.Count; i++)
            {
                ingredients[IngredientNames[i]] = IngredientQuantities[i];
            }

            var newRecipe = new Recipe
            {
                // Id will be generated by the API
                Name = Name,
                Category = Category,
                Instructions = Instructions,
                Thumbnail = Thumbnail,
                Ingredients = ingredients
            };

            var addedRecipe = await _recipeService.AddRecipeAsync(newRecipe);
            Console.WriteLine("Added recipe: {0}", addedRecipe.Id);
            return RedirectToAction("Recipes");
        }

        [HttpPost]
        public async Task<IActionResult> DeleteRecipe(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                return BadRequest("Recipe ID is required.");
            }

            var result = await _recipeService.DeleteRecipeAsync(id);
            if (result)
            {
                return RedirectToAction("Recipes");
            }
            return StatusCode(500, "Internal server error");
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}