@{
    ViewData["Title"] = "Recipe Detail";
}

<h1 class="text-center my-4">Recipe Details</h1>
<div id="recipe-details-container" class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <p>Loading...</p>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Function to get the idMeal from the URL path
        function getIdMealFromUrl() {
            const pathSegments = window.location.pathname.split('/');
            return pathSegments[pathSegments.length - 1];
        }

        // Function to fetch meal details
        async function fetchMealDetails(idMeal) {
            try {
                let response, data;
                response = await fetch(`http://localhost:5085/api/recipe?search=${idMeal}`);
                data = await response.json();
                return data[0];
            } catch (error) {
                console.error('Error fetching meal details:', error);
                return null;
            }
        }

        // Function to display meal details
        function displayMealDetails(meal) {
            const container = document.getElementById('recipe-details-container');
            container.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h2 class="meal-title">${meal.name}</h2>
                        <img src="${meal.thumbnail}" alt="${meal.name}" class="img-fluid rounded">
                    </div>
                    <div class="col-md-6">
                        <h4 class="section-title">Instructions</h4>
                        <p class="meal-instructions">${meal.instructions}</p>
                        <h4 class="section-title">Ingredients</h4>
                        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                            <table class="table table-striped">
                                ${getIngredientsTable(meal)}
                            </table>
                        </div>
                    </div>
                </div>
            `;
        }

        // Function to get ingredients table
        function getIngredientsTable(meal) {
            let ingredients = '';
            for (const [ingredient, measure] of Object.entries(meal.ingredients)) {
                ingredients += `
                    <tr>
                        <td>${measure}</td>
                        <td>${ingredient}</td>
                    </tr>
                `;
            }
            return ingredients;
        }

        // Get the idMeal from the URL and load the meal details
        const idMeal = getIdMealFromUrl();
        if (idMeal) {
            fetchMealDetails(idMeal)
                .then(meal => {
                    if (meal) {
                        displayMealDetails(meal);
                    } else {
                        document.getElementById('recipe-details-container').innerHTML = '<p>Meal not found.</p>';
                    }
                })
                .catch(error => {
                    document.getElementById('recipe-details-container').innerHTML = '<p>Error loading meal details.</p>';
                });
        } else {
            document.getElementById('recipe-details-container').innerHTML = '<p>Invalid meal ID.</p>';
        }
    });
</script>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
    }

    h1 {
        color: #343a40;
    }

    .meal-title {
        color: #007bff;
        font-weight: bold;
    }

    .section-title {
        color: #6c757d;
        margin-top: 20px;
    }

    .meal-instructions {
        text-align: justify;
    }

    .table {
        margin-top: 20px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
</style>